190909_java


생성자의 접근 제어자는 보통 public으로 함
private으로 할 경우 인스턴스의 생성을 제한함
왜 굳이 private 접근제어자를 쓰느냐?
 :: 
db의 경우는 객체생성을 딱 한번만해야돼 여러번하면 여러개의 db 객체가 도니까요..


싱글톤 : 처음부터 끝까지 가는 하나의 통로를 만드는거임. 
객체를 매번 만들지않고 하나의 객체를 클래스로 만들어놓고 그걸 쓰고 쓰고 쓰고 하는거임...


패키지 : member , prod
member : Controler, Service, Dao
prod : Controler, Service, Dao
그치만 db는 한개만 있어야해
member에서 Controler에 있는 객체를 메모리에 다 올려, 걔가 Service의 객체를 불러, 걔가 Dao의 객채를 부르고, 걔가 DB의 객체를 불러오는거임
생성자에서 부르고 부르고 하는거임 
객체생성을 처음에 로드할떄 딱 한번만하고 그뒤로는 계속 같은객체 쓰는거임
생성자를 통해서 그 다음친구의 인스턴스메서드를 호출하고 반복반복임



Car 라는 부모클래스를 상속받는 Firecar, Policecar, Ambulance 클래스가있다면
Policecar p = new Policecar();
Firecar f = new Firecar();
Ambulance a = new Ambulance(); 

얘네를 배열로 저장한다면 각 타입별로 배열을 만들어야하니까 배열 세개를 만들어야되자나여
천개를 만들어야댐? 그럴순없잖아
이걸 Car라는 부모타입으로 만들수있다는거임
Car p = new Policecar();
Car f = new Firecar();
Car a = new Ambulance(); 
당연히 모두 Object 타입으로도 할수있음

부모타입의 참조변수로 자손타입의 인스턴스를 참조할수 있다


부모타입이 자식보다 더 세..! 그래서 부모를 자식으로 참조할때는 다운캐스팅이고 형변환을 표시해줘야함. 자식을 부모로 참조할때는 업캐스팅하고 형변환은 생략됨.

자식타입으로 이미 인스턴스가 만들어진걸 부모타입으로 참조를 한다음에 다시 자식 타입으로 또 참조하는건 가능함! 보이기엔 부모타입을 자식타입에 바로 참조하는것같지만 사실 자식->부모->자식이라 이미 자식타입의 인스턴스가 확실히 만들어진거지

근데 부모타입을 그냥 바로 자식타입으로 참조하는건 문법적으로는 가능하지만 예외가 뜹니다..  자식의 객체가 만들어졌는지 알수없기때문! 들어갈 방이 없는데 어캐 객체를 집어넣나요...



instanceof연산자 하다가 나온건데용, 클래스메서드는 클래스변수처럼 참조변수 타입에 영향을 받음 , 근데 인스턴스 메서드는 자식걸 따라감
class Tv{
    add(){}
}
class SmartTv extends tv{
    add(){}
}
이 경우에는 자식에 있는 add가 당연히 부모의 add()를 오버라이드한거니까
걔를 가져다씀. 이경우에 부모 add 쓰려면 super 쓸수밖에없음



a instanceof b : a는 b의 인스턴스를 가지고있나용
있을 경우  b 타입의 참조변수르 c2를 참조할 수 있음

객체를 받았을때 그 객체가 누구의 인스턴스인지 판단하고 검사해야돼 앞으로


업캐스팅 = 부모타입의 참조변수로 자식타입을 참조했을때 자식꺼는 아예 못씀. 같은 이름의 변수를 부르면 걍 부모꺼가 불러짐. 쓰고싶으면 다시 다운캐스팅해야됨. 그거에 영향을 받지않는 유일한 칭구칭긔가 (오버라이드 되어있는) 인스턴스메서드! 


물건을 사는 메서드 buy가 있으면 각 물건마다 buy 메서드가 있어야되 오버로딩돼서 쭉쭉 있어야겠지
근데 그때 물건들의 상위개념인 product로 묶어서 메서드를 만들면 메서드 하나만으로 전체를 다 할수있지



vector~~~
int[] arr = new int[3]; 을 만들면 크기를 바꿀수가 없음
크기를 늘리고싶으면 더큰 배열을 만들고 거기에 복사를 해야겠쥬
그래서 있는게 Vector v = new Vector(); // 10칸짜리임
배열의 단점을 보완하기 위해 만들어짐

실제로 쓸때는 Vector<타입> v = new Vector();
등러갈수있는 타입은 오로지 객체뿐! 기본형 되겠냐? 안되지!!!
타입을 안쓰면 Object가 들어감




데이터베이스를 먼저짜고 그다음에 view를짜고 그다음에 기능별로 나눠서짤겨














