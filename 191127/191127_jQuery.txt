191127_jQuery

ppt 14p~
컨텍스트를 써서 제한적으로 선택자를 선택할수있음
컨텍스트 쓰면 검색의 시작점!을 고르는거고 생략하면 문서전체에서 검색가능함

form 태그 선택을 위해 document.forms << 이런 애가 있음
$('p', document.forms[0]).css("color","red");  이렇게 하면 0번째 form 내의 p만 선택
참고로 document는 객체니까 따옴표 필요없다

클릭할때마다 폰트 크기를 늘릴수도있음
"font-size : +=3px"   -> 이렇게말여

$('p') 이렇게 가져오는경우를 jQuery 변수로 가져온다 하는거고
document.getElementsByTagName('p')  이렇게 가져오면 dom 객체로 가져오는거임
dom객체로 가져오면 jQuery 함수(css 등) 당연히 쓸수없음

대신 dom객체를 jQuery 안에 담으면 = $() 안에 담으면 쓸수있음
$(plist[0]).css("color","red");    << 이렇게하면 쓸수있쥬


jQuery 객체를 만들어놓고 걔를 jQuery로도, dom으로도 리턴할수있음!!!
pp = $('p');  = 얘는 jQuery 객체잖아
근데 이거를
p3 = pp.eq(3);  이렇게하면 jQuery 객체돼서 p3.css("color","green");  이렇게쓸수있고
p4 = pp[4];      이렇게하면 dom 객체돼서 p4.style.color = 'yellow'; 이렇게 쓸수있음!!
$(p4).css("font-size", "1.5em");   ---> 이렇게하면 jQuery로 만든애를 dom으로 바꿨다가 또 jQuery로 바꾸는 거런거임...

$() == 얘도 jQuery 함수임!!!!


결과적으로 dom객체를 jQuery 객체로 만들어주면 다양한 jQuery 메서드 쓸수있단거임




~~~ 17p 시작

이미 body 태그에 있는거 말고 jQuery 함수의 인수로 새로운걸 넣어줄수있음...
버튼 클릭할때 새로운 p 태그를 body에 넣어준다! 하면
	$('#btn1').on('click', function(){
		// p태그 생성
		pp = $('<p id="p1">배가 너무너무 고픕니다 흑흑</p>');
		
		// pp를 body 태그에 들어가도록함
		$(pp).appendTo(body);
	})
----> 이렇게하면 태그를 새로 만들고 그걸 body 태그에 넣어주는거임
이떄 만들어진 pp의 아이디는 append 한 다음부터 쓸수있다!


버튼을 클릭할때 div에 p태그를 넣고, 그 p 태그에도 클릭할떄의 이벤트를 줄수도 있음..!
	$('#btn2').on('click', function(){
		pp = $('<p></p>', {
			'id' : 'p2',
			'text' : '또띠아또띠아..',    -> 여기까지가 p태그 넣는거
			'click' : function() {	 --->>> 클릭 함수 넣기!!
				// p2 태그를 클릭했을 때의 function
				$(this).css({'font-size':'+=2px'});
			}
		});
		
		$(pp).appendTo('#d2');
	})



** 진짜중요한거한대
p20~

- html(), text()  ---> 이거는 java의 getter같은거임

($('body').html())  = body 태그 내의 모든 태그까지 포함한 문장을 가져와라
($('body').text())  = body 태그 안의 문자를 포함한 문장을 가져와라

$('p').text()  = p가 여러개일 경우, 전체 p를 대상으로해서 문자를 가져와라
$('p').html() = p가 여러개일 경우, 첫번째의 태그를 포함한 문장을 가져와라

---> 요소를 지정할 경우 html은 첫번째거만 가져옴!

검색된 객체의 개수만큼 함수를 호출하는 반복문!!
for문은 보통 i=0~~ 이렇게하잖아
jQuery에서는 인덱스없이 가면되니까 >>> each <<< 이걸 쓸거임
each를 가지고 for문처럼 쓸수있거든
res = "";
 $('p').each(function(){
   res += $(this).html() + "\n";	  <<--- each로 하나씩 부르는거고 그 부른거 = this!!!
 })

body.html(), body.text(), p.text()  ==> 얘네는 전부 반복문없이 다 가져오는애고
p.html()  ==>> 이거 할때만 반복문으로 한거임!!


- html(), text() 를 java의 setter 처럼도 써보겠음
$('#d1').html("<h1>Hello!</h1>");   <<- 이렇게하면 아이디 d1에 저 h1태그를 넣어줄수있음
이렇게 넣어줄때는 html 해야 태그가 적용되어서 들어가고
$('#d2').text("<h1>Hello!</h1>");   >> 이렇게 text() 해주면 저 문장이 통으로 들어감



p24~
후손과 자식의 차이!
자식은 후손에 포함됨.
a의 후손은 모든 자식과 자식의자식 자식의자식의자식을 다 포함하지만
a의 자식은 직속 자식(?) = 바로 밑에있는것까지만임

후손을 골라라 =>>  $('E1 E2')  = 후손, e1의 자식요소중 모든 e2 요소   
자식을 골라라 =>>  $('E1>E2') = 자식, E1의 바로아래 자식중 모든 E2
>>>> 후손은 띄어쓰기, 자식은 >(gt)   <<<<


형제찾기~~
E1 + E2  = 내 바로다음에 나오는 동생중에 모든 E2요소
E1 ~ E2  = 내 다음에 나오는 동생중에 모든 E2

h3, p, p, p, p 로 이루어진 태그가 있다고하면
> h3 다음의 모든 p 형제들의 배경색을 변경한다!
	$('h3 ~ p').css('background', 'yellow');
> h3 다음의 첫번쨰 p 형재의 글자를 굵게한다!
	$('h3 + p').css('font-weight', 'bold');






