191028_highjava


log4j

로깅 :: 처리되는 과정을 계속 기록으로 남기는게 로깅. 
         파일에 저장되게 할수도있고 그때그떄 콘솔에 뜨게할수도 있음

** log4j의 주요 구성요소!
- logger : 메세지를 appender에 전달. 로그레벨을 가지고있어서 출력/비출력 결정함
- appender : 로깅정보를 출력. 로그 출력 위치를 결정. 클래스 이름으로 어디에 출력하는지 짐작 가능
- layouts : 출력 포맷 구성


logger => apache log4j 임포트!

log4j.properties 파일에서
log4j.rootLogger를 골라주면 그거 이후것만 나오는거임 
출력하는 레벨을 조절하는거임!!
순서가 trace->debug->info->warn->error->fatal 인데
log4j.rootLogger = info 면 info, warn, error, fatal 은 다 나오는거임!
보통 여기를 debug로 둡니다



유스케이스 다이어그램~~!~!~!~!~~~

클라이언트의 요구사항을 관련 담당자들이랑 인터뷰해서 어떤 기능이 있어야하고 화면모양은 어떻고
이런걸 얘기해서 만들어내야하거든
그사람들이 얘기하는것들 = 요구사항
구현하는 기능을 누가 사용하는지 그림으로 표현해야댐

유스케이스 다이어그램은 시스템에서 작동되는 기능단위별로 누가 어떤걸 사용하고
이런걸 나타내는 그림임

actor - usecase 

include 화살표 방향은 주기능-> 부기능 


starUML 시작해서 UML Component 누르면 유스케이스 만들수있음
다시 고르고싶으면 file - new project by approach


요소들을 논리적으로 그룹화 :: package
시스템이 제공하는 기능 :: usecase
시스템을 사용하는 사용자 or 외부시스템 :: actor
유스케이스와 액터 사이의 연관관계 :: association
	:: 액터와 유스케이드간의 관계.
유스케이스와 액터 사이의 종속/포함관계 :; directAssociation
	:: 1차액터->유스케이드->2차액터 이지만 방향성이 민감할경우 표시X
더 구체적인 요소의 관계(상속) :: generalization
	:: 액터-액터/ 유스-유스 사이의 관계. 요소들이 공통적으로 갖는 속성
유스케이스와 요소의 의존관계 :: dependency
어떤 유스케이드를 수행하는데 반드시 수행해야하는 유스케이드 :: include
	:: 유스케이스 사이에 공통되는 부분..? a를 하지않으면 b를 할수없는경우
	b가 주유스, a가 부유스 b->a
한 유스케이스가 여러 형태로 분류될때 :: extend
	:: 유스z














