191029_highjava

클래스 다이어그램

클래스는 다이어그램에서 위에서부터 클래스이름/멤버변수/메서드 순서로 기술
변수명 앞에 붙는 기호는 접근제어자
근데 static 기호가 없네 == 밑줄 그리는게 static임
final 상수도 없네 == 중괄호같은거 쓰는거래

메서드에 매개변수는 아래와 같이 표시
메서드명(매개변수: 타입[, 매개변수:타입,...]): 리턴값 

~~~ 관계 ~~~
클래스다이어그램에서 상속받는 모양새는 generalization으로 표시 ㅡ▷

인터페이스와 구현체끼리는 Realization = 실체화로 표시함
인터페이스끼리 상속받는다 하면 ㅡ▷, 구현체와 인터페이스 관계는 구현 ---▷ 인터페이스

Association 또는 Dependency
Association  :: 한 객체가 다른 객체를 소유하거나 파라미터고 객체를 받아서 처리하는 관계
	방향성이 있고요... 단방향일때 화살표를 받는친구는 자기를 가리키고있다는걸 몰라야댐
	사람이 현금을 쓴다 했을때 사람 ㅡ> 현금 이고 현금은 지가 어디서 쓰이는지 모르자나
	사람에게는 현금을 사용하는 메서드가 있는거고
	사람이라는 클래스가 현금 클래스를 소유하거나 
	아니면 변수중에 " 현금 hg = new 현금() " 이렇게 쓰는경우임 

관계가 좀더 세분화된것이 Aggregation, Composition. 근데 Association, Dependency만 구분할줄알면댐

Dependency  :: 한 객체가 다른 객체를 소유하는건 아님. 멤버변수로 갖지않음
	갖다쓰는 객체를 어디서 쓰는지 표시는안됨.. 다른 객체를 생성한다는데용
				클래스 -----> 클래스

Aggregation  :: 외부의 클래스를 쓰는거임   주객체 ◇ㅡ 부객체
Composition :: 쓰고싶은 클래스를 메인클래스에서 생성해서 쓰는거임    주객체 ◆ㅡ 부객체



starUML 에서 default approach 로 여세용

클래스를 만든다음에 오른쪽키 누르면 attribute ==> 멤버변수 추가하는거임
추가할때 왼쪽 버튼으로 private/public 이런거 조절할수있음
타입도 주고싶으면 변수명:"여기에 타입써줘라"
-----> 근데 직접 쓰지말고
Model Explorer 부분에서 변수를 선택하고 밑으로 가보면 static, 초기값, 변수타입 이런거 다 줄수있음

메서드는 오른쪽키 operation
메서드 작성할때는 test(id:String, age:Integer):void   이런식으로!

인터페이스는 toolbox에서 골라서 하면 동그랗게 되거든
근데 그냥 class로 만든 다음에 오른쪽하단 properties / general / StereoType을 interface로 바꿔주면댐





>>>>>>>>>>>>>> 람다식 <<<<<<<<<<<<<<<<<<

함수명은 실행되어야할것들의 주소를 담고있음
그래서 함수명으로 호출하면 제어가 거기로 옮겨가는거임
함수명 = 함수의 시작주소를 알고있다! 라고 보면됨

익명함수같은 경우에는 이름이 없으니까 메모리 어딘가에 저장은 되지만
저장된 주소를 저장할 공간 즉 이름이 없잖아
그래서 익명함수를 변수에 대입하면 (자바스크립트 말하는거임)
익명함수의 주소를 앞의 변수에 저장할수가 있다

var test = function(){ var a=1; document.write(a); }   - ---> 이렇게 말여

원래 자바에서는 저런식으로 쓸수가없었음 익명함수를 처리하는 그런거
근데 자바 1.8부터는 제공을 하고있단다 쓸수있게됐으니까 알아야겠지?

할튼 자바에서는 익명구현체를 좀더 간단하게 구현하는게 람다식이다 이것입니듀


annotation을 지정하지 않아도 되긴함
근데 그러면 메서드를 여러개 만들어버릴수있는데
이걸 람다식으로 변환해서 쓸때는 문제가생겨!
그래서 함수적인터페이스는 @FunctionalInterface 라는 어노테이션을 인터페이스 앞에 써주면
메서드를 여러개 쓸때 오류뜸


람다식쓰면 일반 무명메서드를 쓸때보다 훨씬 간단하게 쓸수있긴하네요... 예...


나중에 javaFx 할때는 람다식을 이벤트 처리할때 많이쓰게될거임
javaFx는 메뉴를 만들어서 클릭하거나 할수있거든
그렇게 일어나는 반응을 처리하는걸 이벤트처리라고함


어떤 클래스의 메서드안에서 람다식을 구현하는데,
람다식 내부에서 지역변수를 사용할수있단닷


익명구현체 내부에서 지역변수를 사용하려면 지역변수는 final이어야함!!!
비록 jdk 1.8부터는 final이 붙어있지않으면 컴파일러가 자동으로 붙여주지만
만약에 구현체 실행하기 전에 변수의 값이 변경되면 에러가납니다..
그러니까 지역변수를 안에서 쓴다 싶으면 걍 final 해주자




>>>>>>>>>>>>> java fx <<<<<<<<<<<<<

help / eclipse marketplace  -->  efxclipse 검색  = e(fx)clipse 3.6.0 나옵니듀 -> install
restart했을때 window/preferences에 javaFX 가 있으면 설치완료!!!

구글에 Scene Builder 검색하면 gluon에서 만든게 있음다
밑으로 내려서 java 8 버전에서 내 운영체제에 맞는걸로 다운로드! 일단 설치만하세용


무튼 프로젝트를 만드는데 java fx project 를 골라서 만드십쇼
그러면 src 아래에 main.java가 있을거임  걍 그렇다고


우리가 윈도우용 프로그램을 만들거임 = GUI (Graphic User Interface)
 예전에 자바에서는 gui를 나오게하는 AWT 가 있었고 ---> 이게 Swing으로 발전 ---> FX

(((( 알아둘것 )))))    자바fx에서는  ---------------------------------------------

1. 윈도우창  ==>  Stage  (무대)

2. 윈도우창에 나타나는 구성요소들 ==> Scene  (장면)
	무대에는 하나의 장면이 배치된다.

클래스 만들게용
java fx main class >> 이친구 찾아서 만들어라 :  main 메서드는 고치는거아니고 그대로 두면댐


실행 순서 ::  main() -> launch() 호출 -> 객체생성자메서드() -> init() -> start() -> 창뜨고 -> 사용자
	 ( launch() 내부에서 지가들어있는클래스의 객체를생성함)
	====~~ 사용자가 사용!~~ ====> 종료하면 stop() 














