200121_spring_오전

오늘오전에는
fileupload 비동기 ajax 할거고요
다시 bootstrap 패키지로 넘어가서 summernote, crud 할겁니다
board 끝나면 바로 회원단/자료실 할거고요
그다음엔 부대적인 transaction, security, spring mail 이런거 할거라네요..
연휴전까지는 어느정도 스프링을 전반적으로 다룰수있도록 해볼게용


ResponseEntity 라는 새로운 객체가 등장했죠?
우리가 REST쓸때 받는쪽에서 성공/실패 여부를 어떻게 서버에서 판단할수있을까
파일을 저장하다가 문제가 났어 그러면 ajax기때문에 exception의 문제가아니고
ajax쪽에 야 이쪽 상황 망했어 라는걸 응답코드로 줘야해
우리가 여태 만들었던건 코드를 내보낼수 없었어 그니까 우리가 500을 직접 만들어서 내보낸게 아니었다는거지

ResponseEntity는 내부적으로 응답코드를 가지고있어서, 응답코드와 대답을 가지고나가
그니까 500이면서 동시에 메세지를 가지고 나갈수있다는거임
뭔가 문제가 생겨서 터지더라도 터진거랑 같이 내보내는 데이터가 있도록 하는..
그래야 받는쪽에서 잘돼서 온 메세지인지 안되서온 메세지인지 알수있단말임
ResponseEntity는 스프링을 써야만 쓸수있는객체다


지금까지 스프링에서만쓸수있는 객체
그니까 스프링 mvc에서 mvc 제작을 목적으로 나온친구가 세개있는데요
Model, ModelAndView, ResponseEntity 이렇게 세개 되겠다

entity = new ResponseEntity<String>("저장되었습니다.", HttpStatus.OK);
return entity;
이렇게말이죠!

근데 저렇게 return하면 어댑터가 헷갈려함 화면이 아니잖여
근데 우리가 REST컨트롤러로 하려고하는거니까 .. 근데 또 어댑터는 모르고...
그래서 핸들러어댑터한테 이걸 화면이아니라 response로 내보내도록 요청을하면
디스패쳐한테 보내면서 이걸 response로 쏴달랍니다! 하게됨
그럼 디스패처서블릿이 그걸 view resolver한테 안주고
자기가가지고있는 resp로 바로 쏴버림

===> 우리는 컨트롤러에서 이내용을 resp body에 넣어서 쏴달라고 말해야되는겨
그걸할수있도록 만든게 REST컨트롤런데 스프링 3버전은 그게 없잖아?
그 전버전에는 response body에 담는 어노테이션이 있었다!!!
@ResponseBody

=== 이 반환값은 화면이 아니니까 response body에 넣어서 쏴라? 하고 말하는거임
그러면 어댑터는 이걸 화면이라고 판단하지않고, 디스팿여한테 야 거기넣어달래 하고 줌


그으으으래서
@ResponseBody 이게 붙어있는 컨트롤러는 REST 컨트롤러라고 간주할수있다는거다


근데 ResponseEntity 반환하면 거기에 메세지랑 에러코드를 담아서 보낼수도 있어
entity = new ResponseEntity<String>("저장되었습니다.", HttpStatus.OK);
이렇게하면 무조건 200으로 나가서 success에 나가는거고
entity = new ResponseEntity<String>("실패!", HttpStatus.INTERNER_SERVER_ERROR);
이렇게하면 ㄴ무조건 500으로 나가서 ERROR로 가는거임

근데 error로 갈때는 저 메세지가 바로 나가는게 아님
에러는 왜 에러가났는지를 봐야해서 error라는거 자체가 반환되거든


mediatype 클래스 만들었는데요
이 클래스에 인스턴스를 만들어서 값을 바꿀 필요가 없어서 static
어디서든 같은 값일 필요가 있을경우(=정적) static

그리고 메서드가 내부 인자를 하나도 쓰지않고 외부인자만 받아서 쓸경우
별로 고민하지말고 그냥 static 주면됨


파일저장을 위한 UploadFileUtils 클래스도 만들었는데요
여기서 이런저런 메서드들 만들고있습니다... 예..

이미지파일에 대해서는 썸네일을 만들건데요
 이미지 여부 확인 -> 이미지를 메모리에 올려 -> 스케일링해서 축소 -> 다시 저장
이런 과정이필요하거드뇽 근데 그걸 해주는 jar 가 있습니다

이걸 이미지 스칼라 라고 하고요 img-scalr maven 검색 -> 4.2 쓸거임
pom.xml의 ependency 추가하세요. 물론 추가할때는 서버 멈추세요
어 이거 안돼서 jar를 web-inf에 lib폴더만들고 거기에넣었음

썸네일만드는중
Scalr.method(automatic) = 가로세로 뭐 이런 옵션이여..
하여튼 이걸로 축소시킨 이미지를 저장하는 코딩입니듀
원본파일명 앞에 s_ 라는걸 붙여볼까함
원래는 UUID_파일명.확장자 인데,  s_UUID_파일명.확장자
그래서 이미지를 저장하면 이미지가 총 두장이 들어감
























