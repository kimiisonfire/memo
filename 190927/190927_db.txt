190927_sql

DB설계는 보통 프로젝트 첫번째 단계에서 설계하지만, 그것의 검증은 프로젝트가 마무리돼야 할수있음

DB설계는 손으로 직접 해봐야된대.

개념설계.. 잘하세요....


데이터베이스 테이블을 가지고 작업을 수행해야겠지? 그래서 테이블을 만드는걸 공부해야됨
db 설계를 공부할건데 이게 관념적인부분이라..

개념적설계 -> 논리적설계 -> 물리적설계  이렇게 3단계를 할건데
거기서 쓰는 이름이 다달라.. 
물리적설계에서 table이라고 부르는걸 논리설계단계에서는 relation이라고함. 
그걸 또 개념적설계단계에선 entity라고함.. 

uml : unified model .. 어쩌고다이어그램으로 구성되고 그려내는...,

샘플 db 테이블은 쇼핑몰관련 테이블 + 선생님이 줄 회사 erp 사원관리 테이블  이렇게 두개로 연습할겨
야! 용어는 그냥 용어다. 굳이 해석하고 정의해서 외우지말고 걍 용어그대로 이해하십쇼,,


A_teachingMaterial/4.Oracle/2.LectureNote/관계데이터모델링v1.0

개체-관계모델 
개체(entity), 관계(relationship), 속성(attribute)
개체 --> 테이블
관계 --> 테이블이 되기도 하고
속성 --> 속성으로 남음

개념적단계에서는 사용자와 클라이언트가 알아보기쉽게 개체/관계/속성을 쉬운 그림으로 보여주는거

(데이터베이스 튜닝 : 데이터가 쌓이다보니까 퍼포먼스시간이 많이걸릴때 튜닝을합니다유 인덱스를 바꾼다던가 구조나 릴레이션을 바꾼다던가 하는!)

개체-관계 다이어그램은 그림으로 그리면 너무 크니까
그냥 문서로 만들어놓고 개념적모델링대신 논리모델링과 합쳐서 바커?표기법으로 표기함




개념적인 얘기 한번 해볼게요

@1단계 데이터모델링 : 현실세계의 데이터를 틀에 맞춰주는 작업. 가장 중요한 개념은 abstraction 추상화.
특징을 뽑고 그걸 일정한 규격에 맞춰서 의미있는 데이터로 취급될수있도록 만들어주는 과정

모델링해야할 대상 : 현재 수행되어야할 업무 
지금 수행되어야할 가장 중요한 업무 = as-is(현재업무)
앞으로 진행될수있는 고려되어야할 업무 = to-be(미래업무)

@2단계 데이터모델링 : 
  - 개념적 데이터 모델링 :: 사용자와 개발자사이의 커뮤니케이션을 활성화시키고 효율성을 높이기 위해서
			공통의 의미를 나타낼수있는 기호를 이용해서 그려낸 개념도
(( 차수 : 관계가 바라보는 입장에 따라 1:n, n:n 
  a->b를보면 1:n, b->a를보면 1:n  ==> 백화점의 상품과 구매자의 관계는 n:n 
  a->b를보면 1:n, b->a를보면 1:1  ==> 딱 한강의만 가르치는 선생과 학생은 1:n  ))

  - 논리적 데이터 모델링 :: 정규화! 릴레이션을 만들었을때 속성이 제대로 정의가 되어졌는지,
			테이블이 제대로 구성되었는지 (정규화, 전체 6단계있음, 테이블이쪼개짐) 
			테이블을 정제시키는 과정인겨
			이단계까지는 dbms랑 무관함
     * 정규화 : 전체 6단계, 정규화를 거치면 테이블이 쪼개짐. 그러면 하나를 검색할떄 테이블을 
	여러개 찾아야되는데 그게  join. (다희의 나이를 알고싶은데 다희table, 나이table을 거치는거)

  - 물리적 데이터 모델링


엔코아에서 나온 de#5 괜찮다네요.. 뭔지는 모르겠지만


부모가 없이 태어날 수 있는거 : 핵심엔터티 (상품, 회원)
부모가 있어야 태아날수있는거 : 키 엔터티 (거래, 구매. 부모가 하나에 자식이 갱장히 많은거)
	전체엔터티의 20%정도. 나머지는 기타 프로세스에서 사용하는 행위 엔터티


새로운 자료를 저장하는 당위성을 주는게 >>업무식별자<< 이자료를 테이블에 저장되어야하는 이유.
다집어넣고 구별하기위해 넣어주는게 인조식별자
상품이있으면 상품 번호, 상품명, 가격, 제조사,...  근데 상품번호를 업무식별자다!라고할순없는거임
사람을 넣는다하면 주민등록번호, 식별번호, 이름, 나이,, 있으면 얘를 테이블에 넣어야하는 이유는 주민번호라서 걔가 업무식별자가되는거고, 얘를 테이블에 넣고나니까 구분할수있는 번호를 붙이겠다 해서 붙이는 식별번호가 인조식별자임!!!

db를 설계할때는 절대절대 프로세스나 프로그램을 생각하지마십쇼 절대... 절대..., 화면도보지마...

db 설계하고 검증해보고싶으면 가상의데이터를 다섯번정도 넣어서 이상없이 저장되는지 보십쇼..


하다보면 도저히 데이터로 안들어가지는애가 있을거임 그런애는 view에서 수행한다던가 해야됨..



@개체-관계 모델 (E-R model; Entity-Relationship model)
엔터티간의 관계를 relationship이라고함 
우리가 지금 관계형 데이터베이스를 배우고 있잖여

관계형 데이터베이스는 insert, update, delete, search중에서 search가 제일 중요함
근데 대용량 데이터베이스등장이후로 insert 기능이 대두되고있음
그래서 얘들을 관계형 데이터베이스를 가지고하면 되게 비효율적임

관계형 데이터베이스모델에서는 E-R이라는게 하나의 룰같은거랄까,, 개체와 관계, 엔터티와 릴레이션쉽,,,
속성은 반드시 속성을 가져야함.??
그치만 관계는 반드시 속성을 가져야되는건 아녀,,

이 관계가 물리적 db를 만들때 join을 하는 근거가 됨. 반드시 관계가 맺어진 테이블 사이에서 join이됨
물론 관계가 없는 테이블에서도 join은 됩니다,, 벗 아주 필요한 경우가 아니면 쓰지말아야하쥬
join 조건을 잘못내리거나 조건이없을떄, 관계가 없는 테이블사이에 join 했을때 만들어지는 결과가 카타시안 프로덕트...? 네???


e-r 모델을 표현했을때 얻을수있는 결과가 e-r diagram ! 


개체(entity) :: 
수학적인 개념이 좀 있습니다.. 
업무를 수행하는데 필요한 데이터를 특성이 유사한것끼리 모아놓은것
특성이 유사한것끼리 = 함수 종속적인 것!(functional dependency)
업무수행에 불필요한 데이터는 엔터티에 필요가없죠..
해당 업무에 필요한 데이터만 모아놓는겁니다요. 
저장할 가치가 있어야하고요.
"저장할 가치"
예를들어  장바구니 테이블을 만드는데 상품테이블에 단가가이미있으면 장바구니에는 수량만있으면되고 수량*단가 = 총 결제금액이자나. 총 금액을 데이터로 보관할 필요가 있을까..? 만약에 고객에게 금액을 계속 보여주고 중간에 물건을 더하거나 빼면 그값이 반영된 값이 보여야하지. 그럴땐 필요하겠지. 근데 내가 주기별로 금액을 확인하는정도라면 매 주문의 총 결제금액은 필요가 없겠지 이미 수량과 단가가 저장될테니까!
다른개체랑 구별되는 이름을 가져야함. 하나의 workspace안에서는 하나의 고유이름을 가져야해
근데 속성 즉 같은 컬럼명은 있어도됨! 속성이니께


엔터티 정의 방법


바커표현방식 : 15p 
사각형으로 표현하고 제일먼저 엔터티명 씀. 속성을 줄줄쓰는데 #붙으면 기본키. *붙으면 필수다~
o가 붙으면 얘는 optional입니다~~ 그리고 엔터티사이를 오리발처럼 이어주는친구가 관계를 표시하는거
직선은 식별자관계, 점선은 비식별관계. 오리발 왼쪽이 부모고 오리발 3개가 붙어있는게 자식임.

부모의 존속여하에 따라 자식의 존속여부가 결정되는게 식별관계임
내 팔이없으면 손이없자나. life cycle이 같이 생성되고 같이 종료되는..
비식별관계는 학교 법인과 학교의 관계임. 학교가 사라져도 건물이 사라지나용? 다른목적으로 쓰겠지뭐~
15p에있는거는 반은 점선, 반은 직선임 = 아직 얘를 결정할수있는 단계가 아니라는 뜻!

15p으 ㅣ친구가 직업이 없어진다고 고객이 없어짐? 아니다 고객없으면 직업없어짐? 아님
== 참조관계. 부모도 아닌거임. 한쪽의 기본키를 한쪽은 일반 항목으로 쓸수있음
직선의 식별관계 즉 종속관계는 부모의 기본키를 자식에서도 기본키로씀!

상품 변경 이력정보는 보관되어야함! 가격변경이력같은거말여.. 

그러면 종속관계에서는 외래키로받는 pk가 엄청 많아질수도 있지않겠어? 여기저기 상속받아서
그럼 얘를 검색하기 빡세질수가있음. 그렇게 길어질때는 별도의 인조식별자를 사용하고 나머지를
일반항목으로 내릴수가 있긴함

제 1 정규화 : 유사한것들이 반복되는.. 그래서 얘를 분리시켜야하는... 
	제 1 정규화정도만 수행해줘도 큰 무리가 읎다

n:n 형식으로 만들어질수있는걸 해소하기위해서 중간에 엔터티를 낑겨넣어줄수도있음
중프나 최프때 이 교차엔터티 갱장히 많이쓰게될것...


슈퍼타입/서브타입.., 
엔터티 내에서 한번 더 들어가나본데요,,, 
서브타입이 공통적으로 가지고있는것들... 슈퍼터입 안에 서브타입이 별도의 테이블로 만들어짐..


관계형 데이터베이스는 데이터의 중복을 피하기위해 필요합니다...!!!
중복이 발생하면 데이터의 일관성을 유지하기 갱장히 힘들죠.



속성은 자바의 변수와 비슷한거. 개체나 관계가 갖는 값.	


~~~ 25p


 
https://www.youtube.com/channel/UCeesWbZ2-pAiB__LQkmkJNA/videos
엔코아

엔코아 da#4

































