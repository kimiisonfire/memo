191001_oracle

오라클 데이터베이스 교안 91p

사원, 사업장, 사업장자재 : 엔터티 
엔터티별 스키마형식으로 나열되어있음
그아래 한사원은 일정기간동안 하나의 사업장에서 >근무한다<
근무한다 <-의 대상은 사원과 사업장
관계는 반드시 두개 이상의 엔터티가 동원되어야함. 두개의 엔터티 사이에서 일어나는 동사
사업장 자재는 하나의 사업자에서만 >관리한다<
관리한다 <- 의 대상은 사업장자재와 사업자관리
----> 관계 : 근무한다, 관리한다


개념erd로 오라클_데이터베이스교안 91p를 그리면
기본키에는 밑줄을 그려주고, 개체는 사각형, 속성은 동그라미에 그려줘
관계는 마름모에 그려주고 개체끼리 연결시켜줘
개체와 개체 사이가 n:m, 1:n인지 파악해줘
관계로 이루어진 개체는 각 개체가 갖는 요소를 모두 데리고있는셈이고
거기;서 별도로 필요한 속성이 있다면 관계 밑에 요소로 적어줘

이제 이걸 바커표기법으로 적으면
사원이라는 개체를 네모네모하게 그리고
기본키인 사원번호는 #을 붙여줘 #사원번호 이렇게
다른 친구들은 *을 붙여서 nullable하지 않다는걸 알려줘 = not null
전화번호같은건 없어도 상관없으니까 o 해줘서 nullable 하다는걸 알려줘
바커에서는 n:m 관계가 될수없으니까 중간에 관계가 껴들면서 각각 1:n으로 표현해주고
사원과 사업장의 개체가 갖는 기본키를 fk로 가져와
그리고 근무라는 관계가 필요로하는 키를 써줘라
그리고 사업장이라는 개체는 비고라는 notnull을 가지고있고, 서브타입이 두개라는것도 표현해줘
오라클은 boolean 즉 true/false가 없어서 0/1 뭐 이런식으로 아니면 null/99 이런식으로 값배정하면됨
만약에 사원 개체가 부서코드<< 라는걸 가진다고했을때
부서코드는 한사원이 여러개의 코드중 하나만 가질수있자나 = 배타? 그런거래
그런경우 부서테이블을 새로 그리고 #부서코드, *부서명~~~, *상태 를 하고 
사원과 부서는 사원>|ㅡㅡ----부서  이렇게돼야겠지
이사업장에 근무하는 직원의 이름과 부서를 알고싶다
==> 사원과 사업장을 연결하는 근무<를 통해서 사원번호와 사업장번호가 일치하는 테이블을 찾고 거기의 사원 테이블의 사원 이름을 가지고와 
==> 그 찾은 사원번호에서 부서테이블로 넘어가서 부서명을 찾아와



논리적설계ㅖㅖㅖㅖㅖ 
데이터베이스 설계 및 구축 32p~~
규칙 4의 1:1관계는 외래키 또는 일반키(?)로 포함할수있음
그리고 IE 표기법도 한번해봤읍니다
IE로 식별/비식별관계를 나타내는걸 해봤음.. 근데 요즘은 바커만한다네여

- 규칙 1 : 모든 개체는 릴레이션으로 변환한다. 
컬럼명도 나중엔 전부 영어로 바꿔줄건데 최대한 정확하게 표현할수있도록 길게써도됨
복합속성은 단순속성만 릴레이션으로 표기함
주소 ( 우편번호, 기본주소, 상세주소)  -> 얘를 주소 대신 우편번호, 기본주소, 상세주소만 씀
원래 고객번호가 바뀌면 나머지 속성도 전부 바뀌어야함
근데 주소는 우편번호가 바뀌면 기본주소가 바뀜
고객번호 < 우편번호 < 기본주소  == 이항종속
이항종속이 발생했을때 원칙적으로는 별도의 테이블을 구축해주긴해야함
그치만 효율성을 강조해서 정규화를 위배하는 테이블 만들수있음 = 역정규화

- 규칙 2 : 다대다관계는 릴레이션으로 변환
다대다관계는 개념 erd까지만 허용됨
n:m 관계에 참여하는 개체는 원칙적으로는 각 개체의 기본키를 상속받는 관계릴레이션을 만들고 각 개체의 기본키를  외래키겸 기본키로 만들어주는게 가장 많이 사용하는 방식
아니면 인조식별자로 기본키를 하나 만들어서 할수도있고

- 규칙 3 : 일대다 관계는 외래키로 표현
다대다관계였으면 관계도 릴레이션으로 만들어야했을텐데
일대다는 관계를 릴레이션으로까지는 만들지않고
그냥 강한개체의 기본키를 외래키로할수있도록 상대적으로 약한 개체의 일반 항목 또는 기본키에 넣어주면된다
식별관계일때는 기본키가 되는거고, 비식별관계일때는 일반항목이 되는거지
1:n일떄 1의 기본키가 n측의 외래키형식으로! 관계에 포함된 속성도 n측으로!!
(약한개체 : A가 없으면 B가 읎다 == B는 약한 개체인듯??)

- 규칙 4 : 일대일관계는 외래키로 표현
1:1은 주로 서브타입인경우, 테이블에 항목이 갱장히많아서 테이블을 분리한경우

- 규칙 5 : 다중값 속성은 릴레이션으로 변환
하나으ㅣ속성이 여러개의 값을 가질수있음 == 다중값속성
그럼 새 릴레이션을 파면되는데 원래의 기본키를 외래키/기본키로 갖고 
원래의 일반항목이었던 다중값속성을 기본키로 가져야쥬


논리적설계의 기타고려사항~
만약에 주문테이블을 62p처럼 만들어놨다!
그러면 회원아이디 a111 인 사람이 상품 p111을 한번 샀으면
a111-p111의 기본키를 갖는게 테이블에 이미 올라가있어서
다음날사고싶으면 못사..! 이미 있으니까....!!!
기본키는 절대로 중복될수없단말여!!!!
그렇다고해서 주문번호만 기본키를 가지면 되지않겠냐? 아니다미친놈아!
주문번호는 카트번호인거임! 한 카트에 여러개의 상품을 담을수있자나 그때 주문번호는 같고

** 한 상품마다 주문번호를 따로주면 안되는데 나중에 다들 그렇게 프로젝트해버린다네,,
** 보통 주문번호는 날짜+sq번호 합쳐서 만듬 20191001_0001 이런식?

글고 논란의 62p는 제2정규화도 위배함
주문릴레이션의 주문번호, 주문수량, 배송지, 주문일자 는 회원아이디와 상품번호에 종속이 되어야함!!! 
회원아이디는 주문번호, 수량, 배송지, 주문일자 모두 포함하는데
상품번호는 배송지를 포함하지않아..! 제2정규화 위반이여
키가 2개이상일떄 발생하는 정규화가 제2정규화임

근데 이거는 개념설계를 릴레이션으로만 바꿔주는 단계에서 고려하지않아도되는단계니까
일단은 이렇게 되어있는거임 이 다음에 따지는거임

~~ 데이터베이스 설계 및 구축 끝냄 ;; 




데이터베이스 설계 및 구축1 수정.pptx 69p~

정규화!!

릴레이션에서 a라는 속성값, 컬럼이 b속성의 값을 유일하게 식별할수있다면 b는 a속성에 함수적으로 종속됐다
== 사원테이블의 사원번호가 나머지 속성들을 유일하게 구별할수있는 값이라면! 나머지속성들은 사원번호에 함수적으로 종속되었다고 할수있습니다유
== 사원번호를 결정자, 나머지들을 종속자라고 헙니다
사원번호 -> 나머지덜   (->) 이걸가지고 종속관계를 표혀ㅑㄴ함

X->Y->Z 종속이 있다면 Z는 X에 간접적으로 종속되어있음 = 이행종속
이럴때 같은 엔터티로 설계해서는 안됨.. X,Y  //  Y,Z 이렇게 별도의 엔터티로 설계

종속성 추론규칙은 넘 어려우니까 넘어갔습니다 후후,,

아노말리 Anomaly
요즘의 dbms에서는 insert anomaly는 잘 일어나지않음 차단하거든
근데 update, delete anlmaly가 발생하면 무결성을 파괴해버림 조심해야혀
75p 에서는 선수번호와 팀번호를 결합한 기본키를 쓰고있음
근데 만약에 홍길동이가 유격수에서 2루수로 포지션이 바뀌면
걔가 포함된 3개의 인스턴스를 모두 바꿔야함
만약에 안바뀐애가있으면 어캐! 미친놈들아!!!  = 업데이트 아노말리
김길동의 인스턴스를 삭제하는데 김길동이 포함된 팀이 삭제돼버려..!! = 삭제어노말리
팀번호가 기본키라 새로운 선수의 팀번호가 없으면 삽입안돼!!  = 삽입어노말리

보통 정규화는 제2정규화? 많이하면 3정규화정도까지만 합니다
정규화를하면 테이블이 너무너무많이만들어지니까,,.


1정규화 ::
모든 속성은 반드시 하나의 값을 가져야함. 
다가속성 = 하나의 콜럼에 여러개의 속성값이 존재할 수 있는것
다가속성이 사용된 릴레이션과 유사속성이반복되는 릴레이션에 제일 자주 사용함

2정규화 ::



~~ 81p 까지~!~~!~!~!~!!!~!~!~!








과제 :: 다음주까지! 하는데까지만!
1) 교안 115p 다수리 (바탕화면참고) 개념erd - 논리적설계까지
고객 - 수리요청 - 직원  // 고객 - 소유 - 자동차 
2) 데이터베이스설계및구축 72~73p 데이터베이스 설계사례
프로젝트 : 사원 = 다대다 // 관리자도 사원(순환(?)참조)
프로젝트 : 부품 = 다대다 // 야.. 너무복잡하다.. 상사와 부하직원의 관계처럼 프로젝트/부품


