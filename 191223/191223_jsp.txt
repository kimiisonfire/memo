191223_jsp


폰트 : 끼부리지말고 돋움체써라 = 고딕계열로 쓰세요
메인화면 : 페이지 한면에 가능한 많은 새로운 소식들을 한눈에 접할수있도록 레이아웃
	화면을 조각조각내서 많은 정보를 담도록 하세용 사용자가 스크롤링할일없게
	사용자의 마우스이동을 최소화시켜서 빠르게 정보를 접하게하도록해라


필터의 init() 메서드는 톰캣이 돌아갈때 가장먼저 실행하는부분
그래서 여기에 초기화하는걸 넣어놓는거임

필터의 doFilter() 메서드
http 방식이 아닌! 리퀘스트/리스폰스를 받기때문에 ServletRequest/ServletResponse인거임. 그래서 이거에서 session을 꺼내려면 http로 캐스팅 해줘야하는거야
이다음 필터로 넘겨주던지, 이필터가 끝이고 그다음이 서블릿이라면 그다음으로 넘겨주는애 = FilterChain  ==> 그래서 chain.doFilter() 하는거임

필터는 주소줄로 요청이 올때마다 필터에 있는 내용(=여기서는 로그인 체크) 수행

chain.doFilter(리퀘,리스) = 이 다음의 필터 또는 서블릿으로 여기서 조작한 리퀘스트, 리스폰스를 가지고 넘어가는거. 서블릿으로 넘어갈때는 원래 주소줄에서 가려고했던 doGet 또는 doPost로 넘어가는거임


~~~~~~~~~ 하던거 이제 마저하겠음다

2. 인코딩 필터 달기~
doPost()의 request.setCharacterEncoding("utf-8");  얘를 매번 하니까,,

EncodingFilter 필터를 만들어서 doFilter에 request.setCharacterEncoding(설정)


~~~~ 리스너~~ 어딘지는 모르겠음~~~~
이벤트는 크게
Register -> Listener -> Handler 으로 나뉨

  * 일단 javaScript 적인 개념으로 먼저 봅시다
레지스터 : 개념적인거임 따로있는거 아니다. 어떤이벤트를 사용할지 규정하는것
	ex) MouseOver : "마우스를 위에 올렸을때" 라고 규정하는거
리스너    : ex) 마우스에 올리면!
핸들러    : action. ex) 색깔을 바꿔라

==>  버튼.마우스를올리다( function 색깔바꿔라(){ })
      target   이벤트	<------ 핸들러 ----->
      <---------리스너------------------------------>

  * 이제 java적 개념으로 볼게용
web.xml에다가 <listener> 라고 주면 아~ 내가 이걸 해야하는구나 하고 실행하는거임
뭘 실행하냐 ? .class를 주면 되는거임 == 얘가 실행해야할 핸들러 클래스

근데 이벤트는 보통 시작-종료야 마우스 다운-업 = 클릭, 마우스온-아웃 = 마우스오버
이것처럼 .class에서도 톰캣의 시작-종료가 있어야해 
근데 그거 이미 있다 미친
init(), destroy() !!!!  리스너 안에다가 이 두개의 메서드를 넣는다..!
리스너 안에 메서드! 리스너 안에 메서드!
init(), destroy() = 핸들러!! ㅇㅒ네가 핸들러 역할이여!!

필터는 요청올때마다 해야하는거
요청에 따라 해줘야하는건 서블릿
리스너는 톰캣이 시작할때 init() - 종료할때 destroy()


우리 mvc할때 db세팅하는거 지금은 서블릿에서하잖여
근데 그거 그렇게하면 안되는거야
db올리는 초기화 작업을 리스너에서 해야 맞는거임
서비스랑 dao를 조립하는 initBean도 서블릿이 아니라 리스너에서 해야하는거야
그럼 리스너로 db세팅, dao-서비스 조립 두가지를 하게될거임다


리스너 만들때 컨텍스트/세션/리퀘스트 가 만들어질떄~ 를 고르는게있는데
우리는 context로 가볼게용
리스너는 Weburl 주소주는게 없어 매핑자체가 의미가 없어
사용자가 주소줄로 요청할때 url인건데 얘는 그게 아니잖여
맨위의 @WebListener도 지우고 생성자 지우고
그러면 contextInitialized(), contextDestroyed()만 남음
얘네는 contextParam을 가져올수있음

	* context-param 기억나는지..? web.xml에서 servlet, filter에서 동시에 사용할
	파라미터는 바깥에 context-param에다가 주기로 했었잖여,,
	여기에 설정한건 sevlet, filter, listener에서 전부 갖다쓸수있는 파라미터

리스너는 따로 init-param이 없고 context-param을 가져가는거임


- 리스너에서 컨텍스트 파라미터 꺼내기!!

이벤트객체는 그거 자체를 가져오면
이벤트가 발생한 대상과 이벤트 종류가 함께옴
마우스를 눌렀다= 를 이벤트로 가져오면 눌렀다 & 마우스 두개가 같이오는거임
우리는 컨텍스트 파라미터를 읽어야해서 컨텍스트가 필요하거든
그래서 contextInitialized(여기에서 ServletContextEvent) 얘를 가져오고
ctxEvent.getServletContext() 를 하면 거기서 컨텍스트만 꺼낸거라서
ctxEvent.getServletContext().getInitParameter("contextParam");
이렇게 가져올수가 있어!!!!


 - jsp_02_mvc 의 리스너 사용하기

(1) service-dao 조립하는 리스너
dao-service 조립하는거 먼저 리스너에 넣어줄게용
InitBeanServlet 서블릿에 있는거 복사해서 contextInit에 붙여넣고
this. 하던거를 
String daoType = ctxEvent.getServletContext().getInitParameter("memberDao");
이렇게 바꿔줭ㅆ음다!
그러면 web.xml의 InitBeanServlet의 init-param을 컨텍스트-param으로 올려줘야해!!
그리고 리스너 등록했다

(2) init dataSource 리스너 
jdbc의 데이터소스를 등록하는 서블릿을 리스너로 변경하기!
web.xml에서 init-param에 담았던거 전부 컨텍스트 파라미터로 올려주고
서블릿을 막고 리스너를 등록합니다으



~~~~~ 사이트메쉬  312p
sitemesh 2.4.2 maven  jar파일 다운로드!
JSP_03_SITEMESH 다이나믹웹프로젝트 팠습니다 => 여기서는 페이징,화면만들기 할겨

사이트메쉬는 필터로 만드는거랍니다
우리는 필터만 WEB.XML에 달아주면됨
일단 다~~적용하고 뺄 페이지만 빼주면 됩니듀

 * web.xml
<filter>
	<filter-name>sitemesh</filter-name>
	<filter-class>
		com.opensymphony.sitemesh.webapp.SiteMeshFilter
	</filter-class>
</filter>
<filter-mapping>
	<filter-name>sitemesh</filter-name>
	<url-pattern>/*</url-pattern>
</filter-mapping>
---> 이걸 써주면 바로 사이트메쉬 필터가 적용됩니듀

http://localhost/JSP_03_SITEMESH/wseihroew 이렇게 아무경로나 들어가보면
500 에러가 나면서 web-inf/ 에 decorators.xml, sitemesh.xml이 없다고 떠
만약에 필터가 없다면 (주석걸어놓으면)
해당 url에 대한 서블릿을 바로 찾으러 가는데 없으니까 404에러가 납니다


 * sitemesh.xml
==> web-inf / 여기에 만들어야함
사이트메쉬 필터는 뭐하는놈?
우리가 원하는대로 페이징할수있도록 디자인같은걸 만들어놓은거임
외부에서 필터를 받아올수있도록 했고, 그걸 xml 파일로 읽어올수있도록하는거

sitemesh.xml 은 우리가 만든 템플릿을 어떤형태로(당연 html이겠지) 바꿀지
config를 어떤 형태로 잡을지에 대한 부분
그때 sitemesh가 가지고있는 HTMLParser, DecoratorMapper 를쓸거임
그래서 sitemesh.xml 방금 만들어놓은걸 바꾸진 않고 그대로 쓸거야

대신 어떤 url에 적용할건지, 어떤 템플릿을 쓸건지에 대해서는 sitemesh.xml한테 줘야지


 * decorators.xml
어떤거는 사이트메쉬를 적용할건지, 안할건지를 여기서 지정하는거임

사용자화면과 관리자화면의 헤더/푸터를 다르게하고싶다
= 템플릿을 두개 만들어야하잖아
=-=> 이걸 각자 적용할수가있다는거임 데코레이터에서
일단 시작하는 url을 정해줘 관리자는/admin, 사용자는/home 이렇게
그리고 사용할 jsp랑 url-pattern을 지정해주고
제외시킬 애들은 excludes에 넣을것임













