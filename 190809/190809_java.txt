8/9

변수의 범위
float, double은 범위를 설정하지 않은 이유
float = 1(부호),8,23
double 하여튼 개크다

포함관계는(<를 포함이라고 생각) 
byte < short < int < long < float < long
               ->> int가 그나마 char 범위를 포함하므로 여기에 char 들어감

------------------------------------------------------------------------


변수는 한번만 선언할 수 있음.
값을 변경할거면 그냥 [변수명] = [값] 해주면댐다


기본적으로 java는 유니코드라는 문자체계를 이용함
그래서 내가 문자형으로 A를 넣어줘도 거기에 할당된 십진수 숫자인 65가 출력
		char bb = 65;
		int cc = 'A';
		System.out.println(bb);
		System.out.println(cc);

		::: A / 65 나옴 

그래서 A = 65 = \u0041 이란말이여,, 개도랏냐고

자바는 문자 하나!만 다루는 애라서, 여러개의 문자열을 다루기위해 String 이라는 참조형 타입이 있음

char는 ''를 공백으로 판단X, 무조건 '' 씀. 문자는 딱 한글자만 칠수있음
string은 ""를 공백으로 판단. 무조건 "" 씀, 길이제한X 


역슬러시 \ 사용하는 중요한 친구들
\u : 유니코드 \u0041 = A
\t : tab
\n : 줄바꿈

jvm은 4바이트기준으로 읽음, 4바이트보다 작은 byte, short는 알아서 4byte로 읽어버려서 잘못 연산할수있음. 걍 int를 쓰는게 마음편함

int 범위는 대략 21억 얼마인데 그것보다 큰 수를 long으로 정의내리고 값을 줘도 에러가뜸. JVM이 기본적으로 4바이트를 읽으니까 얘를 인식 못하는겨. 
long은 숫자 뒤에 L을 붙여 long이라고 표시해야됨


float, double에서도 기본형이 double라서 float은 마지막에 f 표시해줘야됨


overflow : 변수 자신이 저장할수 있는 범위를 넘어서서 다시 처음으로 돌아감 
---> casting : 기본형 변수끼리 형변환을 해주는겨

		  byte -> short -> int -> long -> float -> double
		                    ^
		                    |
		              char-->  
여기서 화살표 역방향으로 변환해줄때는 캐스팅 필요함

		short ss1 = 600;
		int ss2 = 50000;
		char ss3 = 'T';
		byte ss1_2 = (byte)ss1;   >> 캐스팅
		char ss2_2 = (char)ss2;   >> 캐스팅
		int ss3_2  = ss3;	  >> 캐스팅ㄴㄴ

이걸 이용해서 실수형을 정수형으로 만들수 있음

		float ff1 = 3.14f;
		double dd1 = 3.14;
		
		int rr = (int)ff1;
		System.out.println(rr);
		====> 3

3/2=1.5자나.. 근데 3=int, 2=int ->> 3/2=1 이 되는겨
그리고 타입이 다른애들끼리 계산할수없음
3(byte) + 5(int) => 더 범위가 큰 int로 자동 계산 => 8(int)
5(int) + 3.0(double) =>> 5가 double이 되고 값 8.0도 double이 됨

그리고 byte+byte면 jvm이 4바이트 계산하니까 둘다 int가 되고 값도 int됨...
==> 4바이트보다 작은애들끼리 연산할때는 4바이트형으로 변환되어 연산됨




2장 끝!!!


====================================================================

작업했던 java 파일 import/export

export :: 프로젝트 f2로 이름을 바꿔놓은 상태에서
프로젝트 선택 후 export -> general -> archive file 저장!

import :: import -> general -> existing projects into workspace
--> select archive file 



====================================================================

3장 시작....



- 단항 연산자
++ : 한단계 올려주는거
-- : 한단계 내려주는거
+ : 양수표현
- : 음수표현
~ : 틸트
! : not
(type) : 캐스트 연산자

- 이항 연산자
 1. 산술연산자
+, -, *, /
% : 나머지 연산자 3%2 (3 나누기 2=1)
<<, >>, >>> : 쉬프트 연산자

 2. 비교연산자
<, >, <=, >=, ==, !=, instanceof

 3. 논리연산자
&, |(or), ^(nor), &&, ||

- 삼항 연산자
:  ?  :

- 대입 연산자
=, op=










